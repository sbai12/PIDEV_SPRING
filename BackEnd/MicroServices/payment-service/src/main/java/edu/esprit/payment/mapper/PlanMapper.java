package edu.esprit.payment.mapper;

import edu.esprit.payment.dto.paypal.*;
import edu.esprit.payment.entities.Plan;
import edu.esprit.payment.enums.PlanType;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.List;

@Mapper(componentModel = "spring")
public interface PlanMapper {

    @Mapping(target = "product_id", source = "productId")
    @Mapping(target = "billing_cycles", expression = "java(mapBillingCycles(plan))")
    @Mapping(target = "payment_preferences", expression = "java(defaultPaymentPreferences(plan))")
    @Mapping(target = "taxes", ignore = true)
    @Mapping(target = "status", constant = "ACTIVE")
    PlanRequest toPaypalPlanRequest(Plan plan);

    @Mapping(target = "id", ignore = true)
    @Mapping(target = "paypalPlanId", ignore = true)
    @Mapping(target = "productId", source = "product_id")
    @Mapping(target = "name", source = "name")
    @Mapping(target = "description", source = "description")
    @Mapping(target = "amount", expression = "java(extractAmount(request))")
    @Mapping(target = "currency", expression = "java(extractCurrency(request))")
    @Mapping(target = "type", expression = "java(extractPlanType(request))")
    Plan toEntity(PlanRequest request);

    @Mapping(target = "id", ignore = true) // ID is usually generated by service or database
    @Mapping(target = "paypalPlanId", ignore = true) // Set after calling PayPal
    Plan toPlan(edu.esprit.payment.dto.PlanRequest request);

    default List<BillingCycle> mapBillingCycles(Plan plan) {
        Frequency frequency = Frequency.builder()
                .interval_unit(plan.getType().name()) // assuming PlanType enum matches PayPal units
                .interval_count(1)
                .build();

        PricingScheme pricingScheme = PricingScheme.builder()
                .fixed_price(Money.builder()
                        .currency_code(plan.getCurrency())
                        .value(String.valueOf(plan.getAmount()))
                        .build())
                .build();

        BillingCycle cycle = BillingCycle.builder()
                .frequency(frequency)
                .tenure_type("REGULAR")
                .sequence(1)
                .total_cycles(0)
                .pricing_scheme(pricingScheme)
                .build();

        return List.of(cycle);
    }

    default PaymentPreferences defaultPaymentPreferences(Plan plan) {
        return PaymentPreferences.builder()
                .auto_bill_outstanding(true)
                .setup_fee(Money.builder()
                        .currency_code(plan.getCurrency())
                        .value("0")
                        .build())
                .setup_fee_failure_action("CONTINUE")
                .payment_failure_threshold(3)
                .build();
    }

    // Extract amount from first billing cycle
    default Integer extractAmount(PlanRequest request) {
        try {
            return Integer.parseInt(request.getBilling_cycles().get(0)
                    .getPricing_scheme().getFixed_price().getValue());
        } catch (Exception e) {
            return 0;
        }
    }

    default String extractCurrency(PlanRequest request) {
        try {
            return request.getBilling_cycles().get(0)
                    .getPricing_scheme().getFixed_price().getCurrency_code();
        } catch (Exception e) {
            return "USD";
        }
    }

    default PlanType extractPlanType(PlanRequest request) {
        try {
            String interval = request.getBilling_cycles().get(0)
                    .getFrequency().getInterval_unit();
            return PlanType.valueOf(interval);
        } catch (Exception e) {
            return PlanType.MONTHLY;
        }
    }
}
